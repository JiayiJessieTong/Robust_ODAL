id = seq(1:num)+(i-1)*num
X_single = X[id,]
design = cbind(1,X_single)
mat[[i]] =  t(Y[id]-expit(design%*%t(t(beta))))%*%design/length(Y[id])
}
final_mat = apply(simplify2array(mat), 2, median)
final_mat
design = cbind(1,X)
t(Y-expit(design%*%t(t(beta))))%*%design/length(Y)
#estimatior beta and var
L = Lgradient(beta0,X,Y)
L_median = Lgradient_median(beta0,X,Y,1/p)
L2 = Lgradient2(beta0,X) - Lgradient2(beta0,Xlocal)
L2_median = Lgradient2_median(beta0,X,1/p) - Lgradient2(beta0,Xlocal)
L_median
L2_median
L2
beta_tilde2_mean_mean = optim(beta_tilde1_mean,SL2_mean_mean,control = list(maxit = 10000,reltol = 1e-10))$par
#mean of the estimator
beta_tilde1_mean = optim(beta0,SL,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde1_median = optim(beta0,SL_median,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde2_mean_mean = optim(beta_tilde1_mean,SL2_mean_mean,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde2_median_median = optim(beta_tilde1_median,SL2_median_median,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde2_mean_mean
beta_tilde2_median_median
beta_tilde1_mean
beta_tilde1_median
beta0
##########functions############################
expit = function(x){exp(x)/(1+exp(x))}
#likelihood function for logistic regression, the input X is a n*p matrix where
#each patient has p covariates stored in each row.
Lik = function(beta,X,Y){
design = cbind(1,X)
sum(Y*(design%*%t(t(beta)))-log(1+exp(design%*%t(t(beta)))))/length(Y)
}
#first order gradient
#beta:p*1 X:n*p Y:n*1
# mean
Lgradient = function(beta,X,Y){
design = cbind(1,X)
t(Y-expit(design%*%t(t(beta))))%*%design/length(Y)
}
# median
Lgradient_median = function(beta, X, Y, k){
l = seq(1:length(1:dim(X)[1]))
num = length(l)/k
mat = list()
for (i in 1:k){
id = seq(1:num)+(i-1)*num
X_single = X[id,]
design = cbind(1,X_single)
mat[[i]] =  t(Y[id]-expit(design%*%t(t(beta))))%*%design/length(Y[id])
}
final_mat = apply(simplify2array(mat), 2, median)
final_mat
}
# second order gradient
# mean
Lgradient2 =function(beta,X){
design = cbind(1,X)
Z=expit(design%*%beta)
t(c(-1*Z*(1-Z))*design)%*%design/nrow(X)
}
# k is the number of hospitals
Lgradient2_median =function(beta,X,k){
l = seq(1:length(1:dim(X)[1]))
num = length(l)/k
mat = list()
for (i in 1:k){
id = seq(1:num)+(i-1)*num
X_single = X[id,]
design = cbind(1,X_single)
Z=expit(design%*%beta)
mat[[i]] = t(c(-1*Z*(1-Z))*design)%*%design/nrow(X_single)
}
final_mat = apply(simplify2array(mat), 1:2, median)
final_mat
}
# gradient for variance
Lgradient_meat = function(beta,X,Y){
design = cbind(1,X)
Z = expit(design%*%beta)
t(c(Y-Z)*design)%*%(c(Y-Z)*design)/nrow(X)
}
# sandwich variance
Sandwich = function(beta,X,Y,N,k){
# mat_L1 = Lgradient_meat(beta,X,Y)
mat_L2 = Lgradient2(beta,X)
mat_L2_median = Lgradient2_median(beta, X, k)
# inv_L2 = solve.default(mat_L2)
# out = inv_L2%*%mat_L1%*%inv_L2/N
return(list(L2_mean = mat_L2, L2_median = mat_L2_median))
}
#generate the Data to Simulation, nn is the size of each hospital (N/k)
Generate = function(N,beta,nn,x1_mu,x1_var,x2_var,b0,b1){
X1 = rnorm(N-nn,0,1)         #generate N numbers with N(0,1)
X2 = rbinom(N-nn,1,0.3)  #generate N numbers with B(1,0.3)
X = cbind(1,X1,X2)
meanY = expit(X%*%beta)
Y = rbinom(N-nn,1,meanY)
print(dim(X))
allMinisHetero = cbind(X1,X2,Y)
# the heterogeneous site
X1.hetero = rnorm(nn,x1_mu,x1_var)
X2.hetero = rbinom(nn,1,x2_var)
beta.hetero = c(b0, b1, -1)
X.hetero = cbind(1,X1.hetero,X2.hetero)
meanY.hetero = expit(X.hetero%*%beta.hetero)
Y.hetero = rbinom(nn,1,meanY.hetero)
print(dim(X.hetero))
Hetero = cbind(X1.hetero, X2.hetero, Y.hetero)
return(rbind(allMinisHetero, Hetero))
}
#simulation
simu = function(beta,N,p,K,nn,x1_mu,x1_var,x2_var,b0,b1){
# ODAL 1: mean of gradient of each site
SL = function(beta){
-Lik(beta,Xlocal,Ylocal) - L%*%beta
}
# ODAL 1: median of gradient of each site
SL_median = function(beta){
-Lik(beta,Xlocal,Ylocal) - L_median%*%beta
}
# ODAL 2: mean of first gradient, mean of second gradient
SL2_mean_mean = function(beta){
beta_temp = beta - beta0
#mat_temp = t(t(beta_temp))%*%t(beta_temp)
-Lik(beta,Xlocal,Ylocal) - L%*%beta - 0.5*t(beta_temp)%*%L2%*%t(t(beta_temp))
}
# ODAL 2: median of first gradient, median of second gradient
SL2_median_median = function(beta){
beta_temp = beta - beta0
#mat_temp = t(t(beta_temp))%*%t(beta_temp)
-Lik(beta,Xlocal,Ylocal) - L_median%*%beta - 0.5*t(beta_temp)%*%L2_median%*%t(t(beta_temp))
}
#generate the data
Data = Generate(N,beta,nn,x1_mu,x1_var,x2_var,b0,b1)
nlocal = round(N/K,1)   #round to 1e-1
X = Data[,1:2]
Y = Data[,3]
Xlocal = Data[1:nlocal,1:2] ######### update: change nn to nlocal (sine nn can be equal to 2*nn in argument)
Ylocal = Data[1:nlocal,3]
#Local beta and var
E_local = summary(glm(Ylocal~Xlocal, family = "binomial"(link = "logit")))
beta0 = E_local$coefficients[,1]
std0 = E_local$coefficients[,2]
var0 = std0^2
#pooled beta and var
fit = summary(glm(Y~X, family = "binomial"(link = "logit")))
beta_all = fit$coefficients[,1]
std_all = fit$coefficients[,2]
var_all =std_all^2
# meta method
beta_meta_list = matrix(0,nrow = K,ncol = 3)
se_meta_list = matrix(0,nrow = K,ncol = 3)
for (i in c(1:K)){
id = seq(1:(N/K))+(i-1)*(N/K)
X_each = X[id,]
Y_each = Y[id]
fit_each = summary(glm(Y_each~X_each, family = "binomial"(link = "logit")))
beta_meta_list[i,] = fit_each$coefficients[,1]
se_meta_list[i,] = fit_each$coefficients[,2]
}
#estimate from meta-analysis
beta_meta_fix = apply(beta_meta_list/(se_meta_list^2),2,function(x){sum(x, na.rm = T)})/apply(1/(se_meta_list^2),2,function(x){sum(x, na.rm = T)})
vmeta = 1/apply(1/(se_meta_list^2),2,function(x){sum(x, na.rm = T)})
#estimatior beta and var
L = Lgradient(beta0,X,Y)
L_median = Lgradient_median(beta0,X,Y,1/p)
L2 = Lgradient2(beta0,X) - Lgradient2(beta0,Xlocal)
L2_median = Lgradient2_median(beta0,X,1/p) - Lgradient2(beta0,Xlocal)
#mean of the estimator
beta_tilde1_mean = optim(beta0,SL,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde1_median = optim(beta0,SL_median,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde2_mean_mean = optim(beta_tilde1_mean,SL2_mean_mean,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde2_median_median = optim(beta_tilde1_median,SL2_median_median,control = list(maxit = 10000,reltol = 1e-10))$par
#var of the estimator
# var_tilde1_mat = Sandwich(beta_tilde1_mean,Xlocal,Ylocal,N,1/p)
# var_tilde2_mat = Sandwich(beta_tilde2_mean_mean,Xlocal,Ylocal,N,1/p)
#
#output the outcome
total = c(beta_tilde1_mean[3], beta_tilde1_median[3],
beta_tilde2_mean_mean[3],beta_tilde2_median_median[3],
beta_meta_fix[3],
beta0[3],beta_all[3])
# return(list(total = total,
#             var1 = var_tilde1_mat,
#             var2 = var_tilde2_mat))
return(total)
}
# function to draw box plot
# num_var: number of variable used in the model
# df: data frame
# nn: number of patients in each site
# num_hete: number of hetero
boxplot_func <- function(df.tmp){
print("I am plotting! Yeah!")
col_names = c("ODAL1\nmean","ODAL1\nmedian",
"ODAL2\nmean","ODAL2\nmedian",
"Meta\nFix Effect",
"Local","Pooled")
df.tmp = data.frame(t(df.tmp))
names(df.tmp) = col_names
df = df.tmp[,-c(6,7)]
p <- ggplot(stack(df), aes(x=ind, y=values, fill=ind)) +
geom_boxplot(notch=TRUE,fill=c("#c66e06","#eba833",
"#539e52","#8cc56d","#95cbdb")) +
labs(title="",x="", y = "Estimated Log Odds Ratio") +
geom_hline(yintercept =-1,linetype="dotted")+
ylim(-1.25, 0.25)
theme_classic(base_size=20)
print(p)
}
####Simulation Setting######
###Overall Setting##########
#1. number of covariates: 4, beta is of dimension 5#
# True beta#
beta_true = c(-3.5,1,-1)
Nsim = 50
K1 = 10 # K1 is the number of sites
nn1 = 1000   #number of patients in one site
NN1 = nn1*K1
p1 = nn1/NN1
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -3,b1 = 1.9))  #run func with Nsim times
# pdf(paste("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_test_with_Rui_two_var_results_","#sites_",K1,'.pdf',sep = ''), height = 10, width = 16)
boxplot_func(out1_1000)
# # setting 2: two hetero
out2_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.2*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -3,b1 = 1.9))  #run func with Nsim times
boxplot_func(out2_1000)
out2_1000
out1_1000
####Simulation Setting######
###Overall Setting##########
#1. number of covariates: 4, beta is of dimension 5#
# True beta#
beta_true = c(-3.5,1,-1)
Nsim = 50
K1 = 10 # K1 is the number of sites
nn1 = 100   #number of patients in one site
NN1 = nn1*K1
p1 = nn1/NN1
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -3,b1 = 1.9))  #run func with Nsim times
####Simulation Setting######
###Overall Setting##########
#1. number of covariates: 4, beta is of dimension 5#
# True beta#
beta_true = c(-3,1,-1)
Nsim = 50
K1 = 10 # K1 is the number of sites
nn1 = 100   #number of patients in one site
NN1 = nn1*K1
p1 = nn1/NN1
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2.5,b1 = 1.9))  #run func with Nsim times
# pdf(paste("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_test_with_Rui_two_var_results_","#sites_",K1,'.pdf',sep = ''), height = 10, width = 16)
boxplot_func(out1_1000)
#generate the Data to Simulation, nn is the size of each hospital (N/k)
Generate = function(N,beta,nn,x1_mu,x1_var,x2_var,b0,b1){
X1 = rnorm(N-nn,0,1)         #generate N numbers with N(0,1)
X2 = rbinom(N-nn,1,0.3)  #generate N numbers with B(1,0.3)
X = cbind(1,X1,X2)
meanY = expit(X%*%beta)
Y = rbinom(N-nn,1,meanY)
allMinisHetero = cbind(X1,X2,Y)
# the heterogeneous site
X1.hetero = rnorm(nn,x1_mu,x1_var)
X2.hetero = rbinom(nn,1,x2_var)
beta.hetero = c(b0, b1, -1)
X.hetero = cbind(1,X1.hetero,X2.hetero)
meanY.hetero = expit(X.hetero%*%beta.hetero)
Y.hetero = rbinom(nn,1,meanY.hetero)
Hetero = cbind(X1.hetero, X2.hetero, Y.hetero)
return(rbind(allMinisHetero, Hetero))
}
#simulation
simu = function(beta,N,p,K,nn,x1_mu,x1_var,x2_var,b0,b1){
# ODAL 1: mean of gradient of each site
SL = function(beta){
-Lik(beta,Xlocal,Ylocal) - L%*%beta
}
# ODAL 1: median of gradient of each site
SL_median = function(beta){
-Lik(beta,Xlocal,Ylocal) - L_median%*%beta
}
# ODAL 2: mean of first gradient, mean of second gradient
SL2_mean_mean = function(beta){
beta_temp = beta - beta0
#mat_temp = t(t(beta_temp))%*%t(beta_temp)
-Lik(beta,Xlocal,Ylocal) - L%*%beta - 0.5*t(beta_temp)%*%L2%*%t(t(beta_temp))
}
# ODAL 2: median of first gradient, median of second gradient
SL2_median_median = function(beta){
beta_temp = beta - beta0
#mat_temp = t(t(beta_temp))%*%t(beta_temp)
-Lik(beta,Xlocal,Ylocal) - L_median%*%beta - 0.5*t(beta_temp)%*%L2_median%*%t(t(beta_temp))
}
#generate the data
Data = Generate(N,beta,nn,x1_mu,x1_var,x2_var,b0,b1)
nlocal = round(N/K,1)   #round to 1e-1
X = Data[,1:2]
Y = Data[,3]
Xlocal = Data[1:nlocal,1:2] ######### update: change nn to nlocal (sine nn can be equal to 2*nn in argument)
Ylocal = Data[1:nlocal,3]
#Local beta and var
E_local = summary(glm(Ylocal~Xlocal, family = "binomial"(link = "logit")))
beta0 = E_local$coefficients[,1]
std0 = E_local$coefficients[,2]
var0 = std0^2
#pooled beta and var
fit = summary(glm(Y~X, family = "binomial"(link = "logit")))
beta_all = fit$coefficients[,1]
std_all = fit$coefficients[,2]
var_all =std_all^2
# meta method
beta_meta_list = matrix(0,nrow = K,ncol = 3)
se_meta_list = matrix(0,nrow = K,ncol = 3)
for (i in c(1:K)){
id = seq(1:(N/K))+(i-1)*(N/K)
X_each = X[id,]
Y_each = Y[id]
fit_each = summary(glm(Y_each~X_each, family = "binomial"(link = "logit")))
beta_meta_list[i,] = fit_each$coefficients[,1]
se_meta_list[i,] = fit_each$coefficients[,2]
}
#estimate from meta-analysis
beta_meta_fix = apply(beta_meta_list/(se_meta_list^2),2,function(x){sum(x, na.rm = T)})/apply(1/(se_meta_list^2),2,function(x){sum(x, na.rm = T)})
vmeta = 1/apply(1/(se_meta_list^2),2,function(x){sum(x, na.rm = T)})
#estimatior beta and var
L = Lgradient(beta0,X,Y)
L_median = Lgradient_median(beta0,X,Y,1/p)
L2 = Lgradient2(beta0,X) - Lgradient2(beta0,Xlocal)
L2_median = Lgradient2_median(beta0,X,1/p) - Lgradient2(beta0,Xlocal)
#mean of the estimator
beta_tilde1_mean = optim(beta0,SL,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde1_median = optim(beta0,SL_median,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde2_mean_mean = optim(beta_tilde1_mean,SL2_mean_mean,control = list(maxit = 10000,reltol = 1e-10))$par
beta_tilde2_median_median = optim(beta_tilde1_median,SL2_median_median,control = list(maxit = 10000,reltol = 1e-10))$par
#var of the estimator
# var_tilde1_mat = Sandwich(beta_tilde1_mean,Xlocal,Ylocal,N,1/p)
# var_tilde2_mat = Sandwich(beta_tilde2_mean_mean,Xlocal,Ylocal,N,1/p)
#
#output the outcome
total = c(beta_tilde1_mean[3], beta_tilde1_median[3],
beta_tilde2_mean_mean[3],beta_tilde2_median_median[3],
beta_meta_fix[3],
beta0[3],beta_all[3])
# return(list(total = total,
#             var1 = var_tilde1_mat,
#             var2 = var_tilde2_mat))
return(total)
}
# function to draw box plot
# num_var: number of variable used in the model
# df: data frame
# nn: number of patients in each site
# num_hete: number of hetero
boxplot_func <- function(df.tmp){
print("I am plotting! Yeah!")
col_names = c("ODAL1\nmean","ODAL1\nmedian",
"ODAL2\nmean","ODAL2\nmedian",
"Meta\nFix Effect",
"Local","Pooled")
df.tmp = data.frame(t(df.tmp))
names(df.tmp) = col_names
df = df.tmp[,-c(6,7)]
p <- ggplot(stack(df), aes(x=ind, y=values, fill=ind)) +
geom_boxplot(notch=TRUE,fill=c("#c66e06","#eba833",
"#539e52","#8cc56d","#95cbdb")) +
labs(title="",x="", y = "Estimated Log Odds Ratio") +
geom_hline(yintercept =-1,linetype="dotted")
theme_classic(base_size=20)
print(p)
}
####Simulation Setting######
###Overall Setting##########
#1. number of covariates: 4, beta is of dimension 5#
# True beta#
beta_true = c(-3,1,-1)
Nsim = 100
K1 = 10 # K1 is the number of sites
nn1 = 100   #number of patients in one site
NN1 = nn1*K1
p1 = nn1/NN1
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2.5,b1 = 1.9))  #run func with Nsim times
####Simulation Setting######
###Overall Setting##########
#1. number of covariates: 4, beta is of dimension 5#
# True beta#
beta_true = c(-2.5,1,-1)
Nsim = 100
K1 = 10 # K1 is the number of sites
nn1 = 100   #number of patients in one site
NN1 = nn1*K1
p1 = nn1/NN1
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 1.9))  #run func with Nsim times
####Simulation Setting######
###Overall Setting##########
#1. number of covariates: 4, beta is of dimension 5#
# True beta#
beta_true = c(-2.5,1,-1)
Nsim = 100
K1 = 10 # K1 is the number of sites
nn1 = 500   #number of patients in one site
NN1 = nn1*K1
p1 = nn1/NN1
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 1.9))  #run func with Nsim times
# pdf(paste("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_test_with_Rui_two_var_results_","#sites_",K1,'.pdf',sep = ''), height = 10, width = 16)
boxplot_func(out1_1000)
####Simulation Setting######
###Overall Setting##########
#1. number of covariates: 4, beta is of dimension 5#
# True beta#
beta_true = c(-3,1,-1)
Nsim = 100
K1 = 10 # K1 is the number of sites
nn1 = 200   #number of patients in one site
NN1 = nn1*K1
p1 = nn1/NN1
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 1.9))  #run func with Nsim times
# pdf(paste("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_test_with_Rui_two_var_results_","#sites_",K1,'.pdf',sep = ''), height = 10, width = 16)
boxplot_func(out1_1000)
# # setting 2: two hetero
out2_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.2*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -3,b1 = 1.9))  #run func with Nsim times
boxplot_func(out2_1000)
# # setting 2: two hetero
out2_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.2*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 1.9))  #run func with Nsim times
boxplot_func(out2_1000)
####Simulation Setting######
###Overall Setting##########
#1. number of covariates: 4, beta is of dimension 5#
# True beta#
beta_true = c(-2.5,1,-1)
Nsim = 100
K1 = 10 # K1 is the number of sites
nn1 = 500   #number of patients in one site
NN1 = nn1*K1
p1 = nn1/NN1
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 1.9))  #run func with Nsim times
# pdf(paste("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_test_with_Rui_two_var_results_","#sites_",K1,'.pdf',sep = ''), height = 10, width = 16)
boxplot_func(out1_1000)
# # setting 2: two hetero
out2_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.2*K1*nn1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 1.9))  #run func with Nsim times
boxplot_func(out2_1000)
# function to draw box plot
# num_var: number of variable used in the model
# df: data frame
# nn: number of patients in each site
# num_hete: number of hetero
boxplot_func <- function(df.tmp){
print("I am plotting! Yeah!")
col_names = c("ODAL1\nmean","ODAL1\nmedian",
"ODAL2\nmean","ODAL2\nmedian",
"Meta\nFix Effect",
"Local","Pooled")
df.tmp = data.frame(t(df.tmp))
names(df.tmp) = col_names
df = df.tmp[,-c(6,7)]
p <- ggplot(stack(df), aes(x=ind, y=values, fill=ind)) +
geom_boxplot(notch=TRUE,fill=c("#c66e06","#eba833",
"#539e52","#8cc56d","#95cbdb")) +
labs(title="",x="", y = "Estimated Log Odds Ratio") +
geom_hline(yintercept =-1,linetype="dotted") + ylim(-1.25, 1.25)
theme_classic(base_size=20)
print(p)
}
# pdf(paste("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_test_with_Rui_two_var_results_","#sites_",K1,'.pdf',sep = ''), height = 10, width = 16)
boxplot_func(out1_1000)
boxplot_func(out2_1000)
# setting 1: One hetero site out of 10
out1_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.1*NN1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 2.4))  #run func with Nsim times
# # setting 2: two hetero
out2_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.2*NN1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 2.4))  #run func with Nsim times
# pdf(paste("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_test_with_Rui_two_var_results_","#sites_",K1,'.pdf',sep = ''), height = 10, width = 16)
boxplot_func(out1_1000)
save.image("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_two_var_results.Rdata")
boxplot_func(out2_1000)
# # setting 2: two hetero
out2_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.2*NN1,x1_mu = 2,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 2.4))  #run func with Nsim times
boxplot_func(out2_1000)
# # setting 2: two hetero
out2_1000 = replicate(Nsim,simu(beta_true,NN1,p1,K1,nn= 0.2*NN1,x1_mu = 1,x1_var = 1,x2_var = 0.7,b0= -2,b1 = 2))  #run func with Nsim times
boxplot_func(out2_1000)
K2 = 50
nn2 = 1000   #number of patients in one site
NN2 = nn2*K2
p2 = nn2/NN2
# setting 3: 5 hetero site out of 50
out3_1000 = replicate(Nsim,simu(beta_true,NN2,p2,K2,nn= 0.1*K2*nn2,x1_mu = 2,x1_var = 2,x2_var = 0.7,b0= -3,b1 = 1.6))  #run func with Nsim times
pdf(paste("/Users/Jessie/Desktop/000_UPenn_Research/000_project/000_ODAL/R_code/jessie/simulation/two_var/0_test_with_Rui_two_var_results_","#sites_",K1,'.pdf',sep = ''), height = 10, width = 16)
boxplot_func(out1_1000)
dev.off()
# setting 3: 5 hetero site out of 50
out3_1000 = replicate(Nsim,simu(beta_true,NN2,p2,K2,nn= 0.1*NN2,x1_mu = 2,x1_var = 2,x2_var = 0.7,b0= -3,b1 = 1.6))  #run func with Nsim times
boxplot_func(out3_1000)
# setting 3: 5 hetero site out of 50
out3_1000 = replicate(Nsim,simu(beta_true,NN2,p2,K2,nn= 0.1*NN2,x1_mu = 2,x1_var = 2,x2_var = 0.7,b0= -3,b1 = 2.5))  #run func with Nsim times
boxplot_func(out3_1000)
out4_1000 = replicate(Nsim,simu(beta_true,NN2,p2,K2,nn= 1000,x1_mu = 2,x1_var = 2,x2_var = 0.7,b0= -3,b1 = 2.5))  #run func with Nsim times
boxplot_func(out4_1000)
out4_1000 = replicate(Nsim,simu(beta_true,NN2,p2,K2,nn= 8000,x1_mu = 2,x1_var = 2,x2_var = 0.7,b0= -3,b1 = 2.5))  #run func with Nsim times
boxplot_func(out4_1000)
beta
-Lik(beta,Xlocal,Ylocal)
L%*%beta
